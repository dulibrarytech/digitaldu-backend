/**

 Copyright 2022 University of Denver

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 */

'use strict';

const DB = require('../config/db')(),
    REPO_USERS = 'tbl_users_test',
    REPO_OBJECTS = 'tbl_objects_test',
    LOGGER = require('../libs/log4');

// https://stackoverflow.com/questions/35089571/knex-js-create-table-and-insert-data

/**
 * Creates test repo objects table
 */
const create_repo_objects_table = () => {

    DB.schema.createTable(REPO_OBJECTS, (table) => {
        table.increments();
        table.string('is_member_of_collection', 255).collate('utf8_general_ci').comment('collection universal unique identifier');
        table.string('uuid', 255).collate('utf8_general_ci').comment('record universal unique identifier');
        table.string('handle', 255).collate('utf8_general_ci').comment('record handle from handle.net');
        table.string('object_type', 50).collate('utf8_general_ci').comment('collection or object');
        table.text('metadata').collate('utf8_general_ci').comment('ArchivesSpace metadata record (JSON)');
        table.string('thumbnail', 255).collate('utf8_general_ci').comment('path to thumbnail on DuraCloud storage service');
        table.string('file_name', 255).collate('utf8_general_ci').comment('path to master file on DuraCloud storage service');
        table.text('display_record').collate('utf8_general_ci').comment('Elasticsearch indexed document. Contains ArchivesSpace metadata record and digitalDu specific fields');
        table.text('transcript').collate('utf8_general_ci').comment('Transcript text used in discovery layer viewer');
        table.text('transcript_search').collate('utf8_general_ci').comment('transcript text used in full text search');
        table.text('compound_parts').collate('utf8_general_ci').comment('compound object paths to master files');
        table.string('mods_id', 20); // DEPRECATE - use uri instead
        table.string('uri', 255).collate('utf8_general_ci').comment('ArchivesSpace record URI');
        table.string('call_number', 255).collate('utf8_general_ci').comment('object call number (ArchivesSpace Component ID)');
        table.string('mime_type', 100).collate('utf8_general_ci').comment('master object mime type');
        table.string('delete_id', 100).collate('utf8_general_ci').comment('delete id generated by Archivematica'); // TODO: test as integer
        table.string('checksum', 255).collate('utf8_general_ci').comment('master object checksum retrieved from DuraCloud storage service');
        table.bigInteger('file_size', 11).defaultTo(0).collate('utf8_general_ci').comment('master object file size in bytes retrieved from DuraCloud storage service');
        table.boolean('has_transcript').defaultTo(0).collate('utf8_general_ci').comment('Does the record have a transcript? True/False');
        table.boolean('is_compound').defaultTo(0).collate('utf8_general_ci').comment('Does the record contain multiple objects? True/False');
        table.boolean('is_published').defaultTo(0).collate('utf8_general_ci').comment('Is the record published? True/False');
        table.boolean('is_restricted').defaultTo(0).collate('utf8_general_ci').comment('Index only metadata. Object remains suppressed. True/False');
        table.boolean('is_active').defaultTo(1).collate('utf8_general_ci').comment('Is the record available?  True/False');
        table.boolean('is_complete').defaultTo(1).collate('utf8_general_ci').comment('Is the ingest process complete for a record? True/False');
        table.boolean('is_indexed').defaultTo(0).collate('utf8_general_ci').comment('is the record indexed? used when reindexing records. True/False');
        table.boolean('is_updated').defaultTo(0).collate('utf8_general_ci').comment('Has the record been updated during the metadata update process? True/False');
        table.timestamp('created').defaultTo(DB.raw('CURRENT_TIMESTAMP'));
    })
        .then(() => {
            console.log(REPO_OBJECTS + ' table created.');
        })
        .catch((error) => {
            console.log(error);
        });
};

/**
 * Creates test user table
 */
const create_repo_users_table = () => {

    DB.schema.createTable(REPO_USERS, (table) => {
        table.increments();
        table.string('du_id');
        table.string('email');
        table.string('first_name');
        table.string('last_name');
        table.integer('is_active').defaultTo(1);
        table.timestamp('created').defaultTo(DB.raw('CURRENT_TIMESTAMP'));
    })
        .then(() => {
            console.log(REPO_USERS + ' table created.');
        })
        .catch((error) => {
            console.log(error);
        });
};

/**
 *  Creates db test tables
 */
exports.up = () => {
    create_repo_objects_table();
    create_repo_users_table();
};

/**
 * Removes db test tables
 */
exports.down = () => {
    DB.schema
        .dropTable(REPO_USERS)
        .dropTable(REPO_OBJECTS)
        .then(function() {
            console.log('Removing test tables');
        })
        .catch(function(error) {
            console.log(error);
        });
};